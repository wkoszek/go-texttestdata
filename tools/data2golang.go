package main

import "bufio"
import "bytes"
import "flag"
import "fmt"
import "io/ioutil"
import "log"
import "os"
import "time"

func main() {
	paramPackageName := flag.String("pkgname", "main", "generated file package name (default: 'main')")
	paramNlEveryChars := flag.Int("nl", 15, "generate newline after N characters (default: 15)")

	flag.Parse()

	if len(flag.Args()) != 2 {
		fmt.Println("data2golang <filename> <varname>")
		os.Exit(64)
	}

	paramFilename := flag.Arg(0)
	paramVarNameStr := flag.Arg(1)

	var fileByteArr []byte
	var err error
	if paramFilename == "-" {
		scanner := bufio.NewScanner(os.Stdin)
		fileContent := ""
		for scanner.Scan() {
			// @todo: change the scanner to be character-oriented, so that both
			// unix and msdos line endings are supported
			fileContent += scanner.Text() + "\n"
		}
		if err = scanner.Err(); err != nil {
			fmt.Fprintln(os.Stderr, "reading standard input:", err)
		}
		fileByteArr = []byte(fileContent)
	} else {
		fileByteArr, err = ioutil.ReadFile(paramFilename)
		if err != nil {
			log.Fatal(err)
		}
	}
	fileByteTotalLen := len(fileByteArr)

	var outBuf bytes.Buffer

	outBuf.WriteString(fmt.Sprintf("// AUTOGENERATED FROM '%s' (%v), varname:%s\n",
					paramFilename, time.Now(), paramVarNameStr))
	outBuf.WriteString(fmt.Sprintf("package %s\n", *paramPackageName))
	outBuf.WriteString(fmt.Sprintf("// %s is an autogenerated variable\n", paramVarNameStr))
	outBuf.WriteString(fmt.Sprintf("var %s = []byte{\n", paramVarNameStr))
	for fileByteIndex, fileByte := range(fileByteArr) {
		postfixChar := ","
		if (fileByteIndex == fileByteTotalLen - 1) {
			postfixChar = "}"
		}
		nlChar := ""
		if (fileByteIndex + 1) % *paramNlEveryChars == 0 {
			nlChar = "\n"
		}
		outBuf.WriteString(fmt.Sprintf(`0x%02x%s%s`, fileByte, postfixChar, nlChar))
	}
	fmt.Println(outBuf.String())
}
